name: Build and Release (Separate Architectures)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  discussions: write

jobs:
  build:
    name: Build Separate Architectures
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set output
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate changelog
        id: create_release
        run: npx changelogithub --draft --name ${{ steps.vars.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.1"

      - name: Install Tuist
        run: brew install tuist

      - name: Generate Xcode Project
        run: |
          BUILD_NUMBER=$(date "+%Y%m%d%H%M")
          sed -i '' "s/@BUILD_NUMBER@/$BUILD_NUMBER/g" Project.swift
          echo "Build number set to: $BUILD_NUMBER"
          tuist generate --no-open

      # 1. 构建 Intel (x86_64) 版本并打包
      - name: Build and Package Intel Version
        run: |
          # 构建 Intel 版本
          xcodebuild \
            -workspace Dockit.xcworkspace \
            -scheme Dockit \
            -configuration Release \
            -derivedDataPath ./DerivedData-Intel \
            -arch x86_64 \
            clean build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

          # 生成 Intel 版 DMG
          brew install create-dmg
          create-dmg \
            --volname "Dockit (Intel)" \
            --window-size 500 300 \
            --icon-size 100 \
            --icon "Dockit.app" 150 150 \
            --app-drop-link 350 150 \
            --no-internet-enable \
            "Dockit-Intel.dmg" \
            "DerivedData-Intel/Build/Products/Release/Dockit.app"

      # 2. 构建 Apple Silicon (arm64) 版本并打包
      - name: Build and Package Apple Silicon Version
        run: |
          # 构建 Apple Silicon 版本
          xcodebuild \
            -workspace Dockit.xcworkspace \
            -scheme Dockit \
            -configuration Release \
            -derivedDataPath ./DerivedData-ARM \
            -arch arm64 \
            clean build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

          # 生成 Apple Silicon 版 DMG
          create-dmg \
            --volname "Dockit (Apple Silicon)" \
            --window-size 500 300 \
            --icon-size 100 \
            --icon "Dockit.app" 150 150 \
            --app-drop-link 350 150 \
            --no-internet-enable \
            "Dockit-ARM.dmg" \
            "DerivedData-ARM/Build/Products/Release/Dockit.app"

      # 3. 生成包含两个版本校验和的文件
      - name: Generate Checksums
        run: |
          echo "### Dockit ${{ github.ref_name }}" > checksums.txt
          echo "" >> checksums.txt
          echo "### 架构说明" >> checksums.txt
          echo "- Dockit-Intel.dmg: 适用于 Intel 芯片 (x86_64)" >> checksums.txt
          echo "- Dockit-ARM.dmg: 适用于 Apple Silicon 芯片 (arm64)" >> checksums.txt
          echo "- 最低支持 macOS 13.5+" >> checksums.txt
          echo "" >> checksums.txt
          echo "### SHA-256 校验和" >> checksums.txt
          echo "\`\`\`" >> checksums.txt
          shasum -a 256 Dockit-Intel.dmg >> checksums.txt
          shasum -a 256 Dockit-ARM.dmg >> checksums.txt
          echo "\`\`\`" >> checksums.txt

      # 4. 同时发布两个版本的 DMG
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            Dockit-Intel.dmg
            Dockit-ARM.dmg
            checksums.txt
          body_path: checksums.txt
          draft: false
          prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
